path <- "~/transcriptomics/oktopus_full_assembly/"
count0 <- read.delim(paste0(path, 'counts_table_length_ajus_gen_level-aproach2-filtered_mean_reps_vst.txt'), sep = "\t")
dim(count0)
dim(count <- count0[rowSums(count0) > 10, ])
sum(rownames(count) %in% degs)/length(degs)
.cran_packages <- c("wTO", "CoDiNA") # "tidyverse"
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst], dep=TRUE, repos='http://cran.us.r-project.org')
}
library(tidyverse)
source("~/Documents/GitHub/Estadistica_UABC/anova_and_gaussianity.R")
path <- "~/transcriptomics/oktopus_full_assembly/"
pattern <- "counts_table_length_ajus_gen_level-aproach2-filtered.txt"
countf <- list.files(path = path, pattern = pattern, full.names = T)
dim(count0 <- read.delim(countf, sep = "\t"))
dim(count0 <- read.delim(countf, sep = "\t"))
mtd <- read.delim(paste0(path, "metadata.tsv"), sep = "\t")
dim(count <- count0[rowSums(count0) > 10, ])
sum(rownames(count) %in% degs)/length(degs)
PCA <- prcomp(t(count), scale. = FALSE) # log2(count+1))
percentVar <- round(100*PCA$sdev^2/sum(PCA$sdev^2),1)
sd_ratio <- sqrt(percentVar[2] / percentVar[1])
dtvis <- data.frame(PC1 = PCA$x[,1],
PC2 = PCA$x[,2],
mtd %>% distinct(group, .keep_all = T))
mtd
mtd <- read.delim(paste0(path, "metadata.tsv"), sep = "\t")
mtd
library(tidyverse)
library(RColorBrewer)
path <- "~/transcriptomics/oktopus_full_assembly/"
countf <- list.files(path = path, pattern = "counts_table_length_ajus_gen_level-aproach2-filtered.txt", full.names = T)
count <- read.delim(countf, sep = "\t")
mtd <- read.delim(paste0(path, "metadata.tsv"), sep = "\t")
colNames <- names(count)
# count <- edgeR::cpm(count)
count %>%
as_tibble(rownames = "gene") %>%
pivot_longer(all_of(colNames), names_to = "id") %>%
left_join(mtd, by = "id") -> count_longer
topGenes <- sort(rowSums(edgeR::cpm(count)), decreasing = T)
topGenes <- names(head(topGenes, n = 100))
count_longer %>%
filter(gene %in% topGenes) %>%
select(gene, id, value) %>%
pivot_wider(names_from = id, values_from = value, values_fill = NA) %>%
mutate_if(is.double, function(x) log2(x+1)) %>%
data.frame(row.names = 'gene') %>%
superheat::superheat(., row.dendrogram = T, membership.cols = mtd$Tissue, heat.na.col = 'white')
topGenes
table(mtd$group)
library(rstatix)
library(ggpubr)
groups <- mtd$group
table(groups)
groups[which(table(groups) >= 2)]
mtd %>% filter(grepl("LOP", id) | grepl("GL[A-B]", id)) %>% pull(id) -> unpairedReps
# is normal?
source("~/Documents/GitHub/Estadistica_UABC/anova_and_gaussianity.R")
count_longer %>%
rename("g" = "id", x = value) %>%
# mutate(x = log2(x +1)) %>%
is_parametric() %>% arrange(desc(outliers))
qqfun <- function(x) {
x <- x[x > 0]
qq <- qqnorm(x, plot.it = F)
qq %>% as_tibble()
}
zfun <- function(x) {
x <- x[x > 0]
z <- c((x - mean(x)) / sd(x))
# z %>% as_tibble()
return(z)
}
xx <- log2(count$GLO_H_DE_AD_24+1)
qqfun(xx) %>% rstatix::cor_test(x, y)
plot(zfun(xx), qqfun(xx)$y)
count_longer %>%
# filter(value > 0) %>%
group_by(id) %>%
mutate(x = value) %>% # log2(value +1)
summarise(qqfun(x)) %>%
mutate(z = zfun(y)) %>%
mutate(outlier = ifelse(abs(z)>3, TRUE, FALSE)) -> outliersdf
outliersdf
outliersdf %>%
# left_join(mtd) %>%
# rstatix::cor_test(x, y) %>%
# filter(id %in% unpairedReps[1:2]) %>%
ggplot(aes(x, y, group = id, shape = outlier)) +
geom_point(aes(color = z)) +
scale_shape_manual(name = expression("Outlier-"~sigma), values=c(3,1)) +
facet_wrap(~id) +
ggpubr::stat_cor(aes(group = id), method = "pearson", cor.coef.name = "R", p.accuracy = 0.001,
label.y = 18) +
theme_classic(base_family = "GillSans", base_size = 14) +
labs(x = "Expected", y = expression("Observed-"~Log[2]~(x~+1)),
caption = "Correlation Coefficient (Pearson) between theorical normal distribution (expected) against (observed) distribution in the count data.\nThe observed distribution doesn't fit a linear relatioship to a normal distribution (alfa 5%)") +
geom_smooth(method = "lm", linetype="dashed", size = 0.5, alpha=0.5,
se = TRUE, na.rm = TRUE) +
# stat_regline_equation(label.y = 15) +
scale_color_viridis_c(name = expression(sigma)) +
guides(color = guide_colorbar(barheight = unit(5, "in"),
barwidth = unit(0.3, "in"),
ticks.colour = "black",
frame.colour = "black",
label.theme = element_text(size = 14))) -> sigmaP
sigmaP
